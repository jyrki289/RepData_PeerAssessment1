png(filename = "plot2.png",
width = 480,
height = 480,
units = "px",
)
#Create line graph
plot(data$Datetime,
data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
dev.off()
# load required libraries
library(grDevices)
# I'm in Finland so I set locale -- just in case
Sys.setlocale("LC_TIME", "English")
# download file and unzip it
if( !file.exists("household_power_consumption.txt"))
{
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
"data.zip",
mode="wb")
unzip("data.zip")
}
# read data to memory
data <- read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings = "?",
colClasses=c("character","character","numeric","numeric",
"numeric","numeric","numeric","numeric", "numeric")
)
# select desired dates for graphic analyses
data <- subset(data, as.Date(data[,"Date"], "%d/%m/%Y") >= as.Date("01/02/2007", "%d/%m/%Y") &
as.Date(data[,"Date"], "%d/%m/%Y") <= as.Date("02/02/2007", "%d/%m/%Y"))
# create timestamp column from date and time
data$Datetime <- strptime(paste(data[,"Date"], data[,"Time"]), "%d/%m/%Y %H:%M:%S")
# Define png
png(filename = "plot3.png",
width = 480,
height = 480,
units = "px"
)
plot(data$Datetime, data$Sub_metering_1, type="l", col="black", xlab="", ylab="Energy sub metering")
points(data$Datetime, data$Sub_metering_2, type="l", col="red")
points(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright",  col=c("black", "red", "blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), lty="solid")
dev.off()
# load required libraries
library(grDevices)
# I'm in Finland so I set locale -- just in case
Sys.setlocale("LC_TIME", "English")
# download file and unzip it
if( !file.exists("household_power_consumption.txt"))
{
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
"data.zip",
mode="wb")
unzip("data.zip")
}
# read data to memory
data <- read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings = "?",
colClasses=c("character","character","numeric","numeric",
"numeric","numeric","numeric","numeric", "numeric")
)
# select desired dates for graphic analyses
data <- subset(data, as.Date(data[,"Date"], "%d/%m/%Y") >= as.Date("01/02/2007", "%d/%m/%Y") &
as.Date(data[,"Date"], "%d/%m/%Y") <= as.Date("02/02/2007", "%d/%m/%Y"))
# create timestamp column from date and time
data$Datetime <- strptime(paste(data[,"Date"], data[,"Time"]), "%d/%m/%Y %H:%M:%S")
# Define png
png(filename = "plot4.png",
width = 480,
height = 480,
)
# matrix for plots
par(mfrow=c(2,2))
# plot Global_active_power and time
plot(
data$Datetime,
data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power"
)
# plot Voltage and time
plot(
data$Datetime,
data$Voltage,
type="l",
xlab="datetime",
ylab="Voltage"
)
# plot 3 sub metering data to one graph
plot(
data$Datetime,
data$Sub_metering_1,
type="n",
xlab="",
ylab="Energy sub metering"
)
points(data$Datetime, data$Sub_metering_1, type="l", col="black")
points(data$Datetime, data$Sub_metering_2, type="l", col="red")
points(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend(
"topright",
col=c("black", "red", "blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty="solid",
bty = "n"
)
# plot Global_reactive_power over timestamps
plot(
data$Datetime,
data$Global_reactive_power,
type="l",
xlab="datetime",
ylab="Global_reactive_power"
)
# close file device
dev.off()
# load required libraries
library(grDevices)
# I'm in Finland so I set locale -- just in case
Sys.setlocale("LC_TIME", "English")
# download file and unzip it
if( !file.exists("household_power_consumption.txt"))
{
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
"data.zip",
mode="wb")
unzip("data.zip")
}
# read data to memory
data <- read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings = "?",
colClasses=c("character","character","numeric","numeric",
"numeric","numeric","numeric","numeric", "numeric")
)
# select desired dates for graphic analyses
data <- subset(data, as.Date(data[,"Date"], "%d/%m/%Y") >= as.Date("01/02/2007", "%d/%m/%Y") &
as.Date(data[,"Date"], "%d/%m/%Y") <= as.Date("02/02/2007", "%d/%m/%Y"))
# create timestamp column from date and time
data$Datetime <- strptime(paste(data[,"Date"], data[,"Time"]), "%d/%m/%Y %H:%M:%S")
# Define png
png(filename = "plot4.png",
width = 480,
height = 480,
)
# matrix for plots
par(mfrow=c(2,2))
# plot Global_active_power and time
plot(
data$Datetime,
data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power"
)
# plot Voltage and time
plot(
data$Datetime,
data$Voltage,
type="l",
xlab="datetime",
ylab="Voltage"
)
# plot 3 sub metering data to one graph
plot(
data$Datetime,
data$Sub_metering_1,
type="n",
xlab="",
ylab="Energy sub metering"
)
points(data$Datetime, data$Sub_metering_1, type="l", col="black")
points(data$Datetime, data$Sub_metering_2, type="l", col="red")
points(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend(
"topright",
col=c("black", "red", "blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty="solid",
bty = "n"
)
# plot Global_reactive_power over timestamps
plot(
data$Datetime,
data$Global_reactive_power,
type="l",
xlab="datetime",
ylab="Global_reactive_power"
)
# close file device
dev.off()
install.packages('rvest')
library(rvest)
tdist <- html("http://en.wikipedia.org/wiki/Student%27s_t-distribution")
tdist
tdist %>%
html_node("table.infobox") %>%
html_table(header=FALSE)
tab <- html_table(tdist,)
tab <- html_table(tdist)
tab <- html_table(tdist, fill=TRUE)
tab
tab <- html_table(tdist, fill=FALSE)
tab <- html_table(tdist,trim=TRUE, fill=FALSE)
births <- html("http://www.ssa.gov/oact/babynames/numberUSbirths.html")
html_table(html_nodes(births, "table")[[2]])
html_table(html_nodes(births, "table")[[1]])
html_table(html_nodes(births, "table")[[2]])
html_table(html_nodes(births, "table")[,2])
html_table(html_nodes(births, "table")[2])
births
tab <- html_table(html_nodes(tdist, "table"))
tab <- html_table(html_nodes(tdist, "table")[1])
tab
tab <- html_table(html_nodes(tdist, "table")[2])
tab
tab <- html_table(html_nodes(tdist, "table")[3])
tab
tab <- html_table(html_nodes(tdist, "table")[4])
tab
tab <- html_table(html_nodes(tdist, "table")[4])
tab
search <- html_form(html("https://www.google.com"))[[1]]
search
set_values(search, q = "My little pony")
a <- set_values(search, q = "My little pony")
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie
vignette("selectorgadget")
html <- html("http://www.imdb.com/title/tt1490017/")
cast <- html_nodes(html, "#titleCast .itemprop")
length(cast)
cast
cast
cast[1:2]
cast[1:2]
html_text(cast)
cast <- html_nodes(html, "#titleCast td.itemprop")
html_text(cast)
length(cast)
cast <- html_nodes(html, "#titleCast span.itemprop")
html_text(cast)
kurssit <- html(http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&psize=50&listIds=kaikki&rdc=14b079e5d95&gics=0&refresh=60&currency=euro#1421762076890)
kurssit <- html("http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&psize=50&listIds=kaikki&rdc=14b079e5d95&gics=0&refresh=60&currency=euro#1421762076890")
kurssit
html_nodes(kurssit, "#kurssit")
html_nodes(kurssit, "#kurssit")
html_table(html_nodes(kurssit, "#kurssit"))
html_table(html_nodes(kurssit, "#kurssit")[}])
html_table(html_nodes(kurssit, "#kurssit")[])
html_table(html_nodes(kurssit, "#kurssit")[1])
html_table(html_nodes(kurssit, "#taulukonTiedot")[1])
html_table(html_nodes(kurssit, "table")[1])
html_table(html_nodes(kurssit, "table")[2])
html_table(html_nodes(kurssit, "table")[3])
html_table(html_nodes(kurssit, "table")[4])
html_table(html_nodes(kurssit, "table")[5])
k2 <- html_nodes(kurssit, "#taulukonTiedot")
k2
html_table(html_nodes(k2, "table")[])
k2 <- html_nodes(kurssit, "#gics , #taulukonTiedot")
html_table(html_nodes(k2, "table")[])
cl
cl
lenth(table)
length(table)
length(k2)
k2
html_table(html_nodes(k2, "table")[[1]])
html_table(html_nodes(k2, "table"))
kurssit <- html("http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&psize=50&listIds=kaikki&rdc=14b079e5d95&gics=0&refresh=60&currency=euro#1421762804459")
kurssit <- html("http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&psize=50&listIds=kaikki&rdc=14b079e5d95&gics=0&refresh=60&currency=euro#1421762804459")
k2 <- html_nodes(kurssit, "#taulukonTiedot")
k2
html_table(html_nodes(k2, "table"))
kurssit <- html("http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&psize=50&listIds=kaikki&rdc=14b079e5d95&gics=0&refresh=60&currency=euro#1421762804459")
k2 <- html_nodes(kurssit, "#taulukonTiedot")
k2
html_table(html_nodes(k2, "table"))
kurssit <- html("http://www.kauppalehti.fi/5/i/porssi/porssikurssit/lista.jsp?reverse=false&order=alpha&markets=XHEL&volume=cur&listIds=kaikki&currency=euro")
k2 <- html_nodes(kurssit, "#taulukonTiedot")
k2
html_table(html_nodes(k2, "table"))
html_table(html_nodes(k2, "table")[[1]])
html_table(html_nodes(k2, "table")[[2]])
html_table(html_nodes(k2, "table")[[1]])
kohteet <- html("http://www.jokakoti.fi/etusivu;jsessionid=124ounnn293rf1eiue5knh8fm1?0")
koht <- html_nodes(kohteet, "span")
length(koht)
kont[1:2]
koht[1:2]
koht[1:10]
koht <- html_nodes(kohteet, ".search-result")
length(koht)
koht
koht
koht <- html_nodes(kohteet, "#resultList")
koht
html_table(length(koht), "table")
html_table(koht, "table")
html_table(html_nodes(koht, "table"))
test <- html_table(html_nodes(koht, "table"))
test
b <- html_nodes(koht, "#result-10e16d")
test
test <- html_table(html_nodes(koht, "table"))
test <-html_nodes(koht, "table")
test
b <- html_nodes(koht, "#result")
test
b <- html_nodes(koht, "#result")
b
koht
b <- html_nodes(koht, "description info-item")
b <- html_nodes(koht, "class.description info-item")
b <- html_nodes(koht, "#resultList class.description info-item")
b <- html_nodes(koht, "#result class.description info-item")
b <- html_nodes(koht, "#result span.area")
b
b <- html_nodes(koht, "#result span.class")
b
xml1 <- xmlTreeParse(kohteet, useInternal=T)
librayr(xml)
library(xml)
library(XML)
xml1 <- xmlTreeParse(kohteet, useInternal=T)
kohteet <- "http://www.jokakoti.fi/etusivu;jsessionid=124ounnn293rf1eiue5knh8fm1?0"
xml1 <- xmlTreeParse(kohteet, useInternal=T)
xml1 <- xmlTreeParse(kohteet, useInternal=F)
search <- html_form(html("https://www.google.com"))[[1]]
set_values(search, q = "My little pony")
set_values(search, hl = "fr")
set_values(search, btnI = "blah")
set_values(search, hl = "Google-haku")
set_values(search, q = "My little pony")
set_values(search, btnG = "Google-haku")
t <- set_values(search, q = "My little pony")
t
search
search <- html_form(html("https://www.google.com"))
search
t <- set_values(search, q = "My little pony")
set_values(search, q = "My little pony")
search <- html_form(html("https://www.google.com"))[[1]]
set_values(search, q = "My little pony")
t <- set_values(search, q = "My little pony")
a <- submit_form(t)
a <- submit_form("https://www.google.com", t)
submit_form("https://www.google.com", t)
set_values(search, q = "My little pony", btnI="Kokeilen onneani")
search <- html_form(html("https://www.google.com"))[[2]]
search <- html_form(html("https://www.google.com"))[[1]]
set_values(search, q = "My little pony", btnI="Kokeilen onneani")
set_values(search, q = "My little pony", btnI)
search <- html_form(html("https://www.google.com"))[[1]]
set_values(search, q = "My little pony")
set_values(search, btnG = "blah")
set_values(search, btnI = "blah")
t <- set_values(search, q = "My little pony")
t
submit_form("https://www.google.fi/?gfe_rd=cr&ei=fnG-VJJhsqvzB4mBgagM&gws_rd=ssl", t)
a <- submit_form("https://www.google.fi/?gfe_rd=cr&ei=fnG-VJJhsqvzB4mBgagM&gws_rd=ssl", t)
a <- submit_form("http://www.google.fi/?gfe_rd=cr&ei=fnG-VJJhsqvzB4mBgagM&gws_rd=ssl", t)
V1 <- as.vector(seq(1,10))
VI
V1
V2 <- as.vector(seq(11,20))
V2
V4 <- V1+V2
V4 <- V1+20
V¤
V4
V3 <- V1+V2
V#
V3
dim(V1)
length(V1)
dim(V1)
vim(T(V1))
dim(T(V1))
dim(t(V1))
dim(t(t(v1)))
dim(t(t(V1)))
TV <- t(V1)
TV
t(TV)
t(TV)[3,1]
V2 4*V1
V2 <- 4*V1
V""
V2
V1
V1*V2
V1 <- seq(1,10)
V2 <- seq(1,4)
V1
V2
outer.prod <- V1 %*% t(V2)
outer.prod
V1
outer.prod <- V1 %*% t(V1)
outer.prod
V1 <- seq(1,10)
V2 <- seq(11,20)
V1
t(V2)
t(V2)
V2 <- seq(11,20)
V2
sum(outer.prod)
V1*v2
V1*V2
sum(V1*V2)
inner.prod <- t(V1) %*% V2
inner.prod
t(V1)
t1%*%t(V1)
V1%*%t(V1)
t(V1)%*%V1
setwd(C:/Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1)
set.wd(C:/Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1)
getwd()
setwd(C:/Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1)
setwd(C:Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1)
setwd(C://Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1)
setwd("C:/Users/leppajyr/Documents/GitHub/RepData_PeerAssessment1")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Setting time locale to English
´´´{r}
Sys.setlocale("LC_TIME", "English")
´´´
summary(data)
?complete.cases
?sum
?complete.cases
sum(!complete.cases(actdata))
if( !file.exists("activity.csv")) {
unzip("activity.zip")
actdata <- read.csv("activity.csv", stringsAsFactors=FALSE)
actdata$date <- as.Date(actdata$date, "%Y-%m-%d")
}
}
if( !file.exists("activity.csv"))
unzip("activity.zip")
actdata <- read.csv("activity.csv", stringsAsFactors=FALSE)
actdata$date <- as.Date(actdata$date, "%Y-%m-%d")
summary(actdata)
totalcases <- nrow(actdata); print(totalcases)
notok <- sum(!complete.cases(actdata)); print (notok)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
avg <- mean(daysteps$x, na.rm=TRUE)
med <- median(daysteps$x, na.rm=TRUE)
total <- sum(daysteps$steps, na.rm=TRUE)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
rm(daysteps)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
avg <- mean(daysteps$x, na.rm=TRUE)
med <- median(daysteps$x, na.rm=TRUE)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
rm(daysteps)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
rm(daysteps)
daysteps[,"steps"] <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps[,]
daysteps <- c(,)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps <- matrix(,nrow=0, ncol=0)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps <- matrix(,nrow=0, ncol=0)
View(daysteps)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
unique(actdata$date)
count(unique(actdata$date))
(uniquevalues(actdata$date))
?unique
lenght(unique(actdata$date))
length(unique(actdata$date))
daysteps <- matrix(, nrow=length(unique(actdata$date)), ncol=2)
daysteps$steps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
daysteps <- aggregate(actdata$steps, by=list(date=actdata$date), FUN=sum)
avg <- mean(daysteps$x, na.rm=TRUE)
med <- median(daysteps$x, na.rm=TRUE)
total <- sum(daysteps$x, na.rm=TRUE)
?hist
?hist
?legend
ismax <- interstep$x==max(interstep$x)
?plot
?legend
?abline
?abplot
?unique
?uniquevalues
??uniquevalues
??unique.values
?plot
plot(sin, -pi, 2*pi
)
No I investigate differences with weekdays and weekends. First I have to find weekpart, based on weekdays. After that I can make graphs to investigatian.
